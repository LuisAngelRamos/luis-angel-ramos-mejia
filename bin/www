#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('e-backend-logger:server');
var http = require('http');
var mongoose = require('mongoose');
const routesMain = require('../routes/main.routes');
const routesAuth = require('../routes/auth.routes');
const jwt = require("jwt-simple");
const AuthorizationsDB = require("../db/Authorizations");

const authLogger = async (req, res, next) => {
	try {
		if (!req.headers.authorization || req.headers.authorization.indexOf('Bearer ') === -1) {
			return res.status(400).json({
				message: "Token Not Found.",
			});
		}
		const credentials = req.headers.authorization.split(' ')[1];
		const data_app = jwt.decode(credentials, "e-backend-logger");
		const date = new Date();
		const date_token = new Date(data_app.date);
		const hours = Math.abs(date_token - date) / 36e5;

		if (hours >= 1) {
			return res.status(400).json({
				message: "Token Expired.",
			});
		}

		const auth = await AuthorizationsDB.findOne({ token: credentials }).populate('application_id');

		if (!auth) {
			return res.status(400).json({
				message: "Auth Not Found.",
			});
		}

		res.auth = auth;
		next();
	} catch (e) {
		console.log(e);
		return res.status(400).json({
			message: "Token Expired.",
		})
	}
};


/**
 * Init mongoose.
 */
 
mongoose.connect('mongodb://localhost:27017/logs');

const db = mongoose.connection;
db.on("error", console.error.bind(console, "connection error: "));
db.once("open", function () {
	console.log("Connected successfully");
});

app.use('/logs', authLogger,routesMain);
app.use('/auth',routesAuth);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
